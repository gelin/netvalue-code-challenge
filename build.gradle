import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'org.springframework.boot' version '3.0.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.jetbrains.kotlin.jvm' version '1.7.22'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
}

group = 'nz.netvalue'
version = '0.2.0'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'

	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'

	implementation 'org.flywaydb:flyway-core'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	runtimeOnly 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.withType(KotlinCompile).configureEach {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '17'
	}
}

// to inject project version to application.properties
// https://www.baeldung.com/spring-boot-auto-property-expansion
import org.apache.tools.ant.filters.ReplaceTokens
processResources {
	with copySpec {
		duplicatesStrategy = DuplicatesStrategy.INCLUDE
		from 'src/main/resources'
		include '**/application*.yml'
		include '**/application*.yaml'
		include '**/application*.properties'
		project.properties.findAll().each {
			prop ->
				if (prop.value != null) {
					filter(ReplaceTokens, tokens: [ (prop.key): prop.value.toString()])
					filter(ReplaceTokens, tokens: [ ('project.' + prop.key): prop.value.toString()])
				}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
